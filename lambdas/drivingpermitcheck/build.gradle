import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
	id "java"
	id "idea"
	id "jacoco"
	id 'java-test-fixtures'
}

configurations.all {
	// https://aws.amazon.com/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/
	exclude group:"software.amazon.awssdk", module: "apache-client"
	exclude group:"software.amazon.awssdk", module: "netty-nio-client"
	exclude group:"software.amazon.awssdk", module: "url-connection-client"
}

dependencies {
	implementation project(":lib"), project(":lib-dva"), project(":lib-dvla")

	testImplementation testFixtures(project(":lib")),
			testFixtures(this.project),
			"org.junit.jupiter:junit-jupiter-engine:${dependencyVersions.junit_version}",
			"org.junit.jupiter:junit-jupiter-api:${dependencyVersions.junit_version}",
			"org.junit.jupiter:junit-jupiter-params:${dependencyVersions.junit_version}",
			"org.mockito:mockito-junit-jupiter:${dependencyVersions.mockito_version}",
			"org.mockito:mockito-core:${dependencyVersions.mockito_version}",
			"uk.org.webcompere:system-stubs-core:${dependencyVersions.webcompere_version}",
			"uk.org.webcompere:system-stubs-jupiter:${dependencyVersions.webcompere_version}",
			"org.wiremock:wiremock:3.12.1"

	testFixturesImplementation project(":lib"), project(":lib-dvla"),
			"uk.gov.account:cri-common-lib:${dependencyVersions.cri_common_lib_version}",
			"org.apache.httpcomponents:httpcore:${dependencyVersions.httpcomponents_core_version}",
			"org.apache.httpcomponents:httpclient:${dependencyVersions.httpcomponents_client_version}"
}

tasks.register('buildZip', Zip) {
	from compileJava
	from processResources
	destinationDirectory = file("$rootDir/dist")
	into("lib") {
		from configurations.runtimeClasspath
	}
}

test {
	useJUnitPlatform {
		excludeTags 'Pact', 'TestKmsEncryption', 'TestKmsVerification','TestToCreateDvaResponseForE2ETest', 'FullE2ECertTest'
	}
	finalizedBy jacocoTestReport, jacocoTestCoverageVerification
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
	}
}

tasks.register("cryptoRegressionTest", Test) {
	useJUnitPlatform {
		includeTags 'Crypto-regression'
	}
}

tasks.withType(Test).configureEach {
	testLogging {
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED

		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces true

		afterSuite { suite, result ->
			if (!suite.parent) {
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
				def startItem = "|  ", endItem = "  |"
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println("\n" + ("-" * repeatLength) + "\n" + startItem + output + endItem + "\n" + ("-" * repeatLength))
			}
		}
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				minimum = minUnitTestLineCoverage
			}
			limit {
				counter = 'BRANCH'
				minimum = minUnitTestBranchCoverage
			}
		}
	}
}
