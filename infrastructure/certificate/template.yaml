AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: DVA certificate infra

Parameters:
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
    ConstraintDescription: must be dev, build, staging, integration or production

Conditions:
  IsCAEnvironment:
    Fn::Or:
      - !Equals [!Ref Environment, "production"]
      - !Equals [!Ref Environment, "staging"]

Mappings:
  domain:
    Environment:
      dev: "review-d.dev.account.gov.uk"
      build: "review-d.build.account.gov.uk"
      staging: "review-d.staging.account.gov.uk"
      integration: "review-d.integration.account.gov.uk"
      production: "review-d.account.gov.uk"

Resources:
####################################################################
#                                                                  #
# DVA CA & Certs                                                  #
#                                                                  #
####################################################################

  DLPrivateCA:
    Type: AWS::ACMPCA::CertificateAuthority
    Condition: IsCAEnvironment
    Properties:
      KeyAlgorithm: RSA_2048
      KeyStorageSecurityStandard: FIPS_140_2_LEVEL_3_OR_HIGHER
      SigningAlgorithm: SHA256WITHRSA
      Subject:
        CommonName: GDS DL DVA Test Root CA G3
        Country: GB
        Organization: GOVUK One Login
        OrganizationalUnit: GDS
      Type: ROOT
      UsageMode: GENERAL_PURPOSE
      RevocationConfiguration:
        CrlConfiguration:
          Enabled: false
      Tags:
        - Key: CreatedBy
          Value: InfraAsCode

  RootCACertificate:
    Type: AWS::ACMPCA::Certificate
    Condition: IsCAEnvironment
    Properties:
      CertificateAuthorityArn: !Ref DLPrivateCA
      CertificateSigningRequest: !GetAtt DLPrivateCA.CertificateSigningRequest
      SigningAlgorithm: SHA256WITHRSA
      TemplateArn: arn:aws:acm-pca:::template/RootCACertificate/V1
      Validity:
        Type: DAYS
        Value: 3563

  RootCAActivation:
    Type: AWS::ACMPCA::CertificateAuthorityActivation
    Condition: IsCAEnvironment
    Properties:
      CertificateAuthorityArn: !Ref DLPrivateCA
      Certificate: !GetAtt RootCACertificate.Certificate
      Status: ACTIVE

  RootCAPermission:
    Type: AWS::ACMPCA::Permission
    Condition: IsCAEnvironment
    Properties:
      Actions:
        - IssueCertificate
        - GetCertificate
        - ListPermissions
      CertificateAuthorityArn: !Ref DLPrivateCA
      Principal: acm.amazonaws.com

  SigningCertificatePrivate:
    DependsOn:
      - RootCAActivation
    Type: "AWS::CertificateManager::Certificate"
    Condition: IsCAEnvironment
    Properties:
      CertificateAuthorityArn: !Ref DLPrivateCA
      DomainName: !FindInMap [ domain, Environment, !Ref 'Environment' ]
      DomainValidationOptions:
        - DomainName: !FindInMap [ domain, Environment, !Ref 'Environment' ]
          ValidationDomain: !FindInMap [ domain, Environment, !Ref 'Environment' ]
      ValidationMethod: DNS
      KeyAlgorithm: RSA_2048
      Tags:
        - Key: CreatedBy
          Value: InfraAsCode
        - Key: certificateName
          Value: primary-signing-certificate
  
  SecondarySigningCertificatePrivate:
    DependsOn:
      - RootCAActivation
    Type: "AWS::CertificateManager::Certificate"
    Condition: IsCAEnvironment
    Properties:
      CertificateAuthorityArn: !Ref DLPrivateCA
      DomainName: !FindInMap [ domain, Environment, !Ref 'Environment' ]
      DomainValidationOptions:
        - DomainName: !FindInMap [ domain, Environment, !Ref 'Environment' ]
          ValidationDomain: !FindInMap [ domain, Environment, !Ref 'Environment' ]
      ValidationMethod: DNS
      KeyAlgorithm: RSA_2048
      Tags:
        - Key: CreatedBy
          Value: InfraAsCode
        - Key: certificateName
          Value: secondary-signing-certificate

  MtlsCertificatePrivate:
    DependsOn:
      - RootCAActivation
    Type: "AWS::CertificateManager::Certificate"
    Condition: IsCAEnvironment
    Properties:
      CertificateAuthorityArn: !Ref DLPrivateCA
      DomainName: !FindInMap [ domain, Environment, !Ref 'Environment' ]
      DomainValidationOptions:
        - DomainName: !FindInMap [ domain, Environment, !Ref 'Environment' ]
          ValidationDomain: !FindInMap [ domain, Environment, !Ref 'Environment' ]
      ValidationMethod: DNS
      KeyAlgorithm: RSA_2048
      Tags:
        - Key: CreatedBy
          Value: InfraAsCode
        - Key: certificateName
          Value: mtls-certificate

  EncryptionCertificatePrivate:
    DependsOn:
      - RootCAActivation
    Type: "AWS::CertificateManager::Certificate"
    Condition: IsCAEnvironment
    Properties:
      CertificateAuthorityArn: !Ref DLPrivateCA
      DomainName: !FindInMap [ domain, Environment, !Ref 'Environment' ]
      DomainValidationOptions:
        - DomainName: !FindInMap [ domain, Environment, !Ref 'Environment' ]
          ValidationDomain: !FindInMap [ domain, Environment, !Ref 'Environment' ]
      ValidationMethod: DNS
      KeyAlgorithm: RSA_2048
      Tags:
        - Key: CreatedBy
          Value: InfraAsCode
        - Key: certificateName
          Value: primary-encryption-certificate

  SecondaryEncryptionCertificatePrivate:
    DependsOn:
      - RootCAActivation
    Type: "AWS::CertificateManager::Certificate"
    Condition: IsCAEnvironment
    Properties:
      CertificateAuthorityArn: !Ref DLPrivateCA
      DomainName: !FindInMap [ domain, Environment, !Ref 'Environment' ]
      DomainValidationOptions:
        - DomainName: !FindInMap [ domain, Environment, !Ref 'Environment' ]
          ValidationDomain: !FindInMap [ domain, Environment, !Ref 'Environment' ]
      ValidationMethod: DNS
      KeyAlgorithm: RSA_2048
      Tags:
        - Key: CreatedBy
          Value: InfraAsCode
        - Key: certificateName
          Value: secondary-encryption-certificate

####################################################################
#                                                                  #
# DVA Crypto Keys                                                  #
#                                                                  #
####################################################################

  DvaEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: acm kms encryption key created with cli
      KeySpec: RSA_2048
      KeyUsage: ENCRYPT_DECRYPT
      Origin: EXTERNAL

  SecondaryDvaEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: acm kms encryption key created with cli
      KeySpec: RSA_2048
      KeyUsage: ENCRYPT_DECRYPT
      Origin: EXTERNAL

  DvaEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/acm-encryption-key
      TargetKeyId: !Ref DvaEncryptionKey

  SecondaryDvaEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/acm-secondary-encryption-key
      TargetKeyId: !Ref SecondaryDvaEncryptionKey

  DvaSigningKey:
    Type: AWS::KMS::Key
    Properties:
      Description: acm kms signing key created with cli
      KeySpec: RSA_2048
      KeyUsage: SIGN_VERIFY
      Origin: EXTERNAL

  SecondaryDvaSigningKey:
    Type: AWS::KMS::Key
    Properties:
      Description: acm kms signing key created with cli
      KeySpec: RSA_2048
      KeyUsage: SIGN_VERIFY
      Origin: EXTERNAL

  DvaSigningKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/acm-signing-key
      TargetKeyId: !Ref DvaSigningKey
  
  SecondaryDvaSigningKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/secondary-acm-signing-key
      TargetKeyId: !Ref SecondaryDvaSigningKey

####################################################################
#                                                                  #
# Outputs                                                  #
#                                                                  #
####################################################################

Outputs:
  RootCACertificateArn:
    Condition: IsCAEnvironment
    Description: Root certificate Arn
    Value: !Ref RootCACertificate
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DLCRIRootCertificateArn

  SigningCertificateArnPrivate:
    Condition: IsCAEnvironment
    Description: Signing certificate Arn
    Value: !Ref SigningCertificatePrivate
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DLCRISigningCertificateArn

  SecondarySigningCertificateArnPrivate:
    Condition: IsCAEnvironment
    Description: Signing certificate Arn
    Value: !Ref SecondarySigningCertificatePrivate
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DLCRISecondarySigningCertificateArn

  EncryptionCertificateArnPrivate:
    Condition: IsCAEnvironment
    Description: Encryption certificate Arn
    Value: !Ref EncryptionCertificatePrivate
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DLCRIEncryptionCertificateArn

  SecondaryEncryptionCertificateArnPrivate:
    Condition: IsCAEnvironment
    Description: Encryption certificate Arn
    Value: !Ref SecondaryEncryptionCertificatePrivate
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DLCRISecondaryEncryptionCertificateArn

  MtlsCertificateArnPrivate:
    Condition: IsCAEnvironment
    Description: MTLS certificate Arn
    Value: !Ref MtlsCertificatePrivate
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DLCRIMtlsCertificateArn

  DvaSigningKeyIdOutput:
    Description: DVA signing jey ID
    Value: !GetAtt DvaSigningKey.KeyId
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DvaSigningKeyId

  SecondaryDvaSigningKeyIdOutput:
    Description: DVA signing jey ID
    Value: !GetAtt SecondaryDvaSigningKey.KeyId
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-SecondaryDvaSigningKeyId

  DvaEncryptionKeyIdOutput:
    Description: DVA encryption key ID
    Value: !GetAtt DvaEncryptionKey.KeyId
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DvaEncryptionKeyId

  SecondaryDvaEncryptionKeyIdOutput:
    Description: DVA encryption key ID
    Value: !GetAtt SecondaryDvaEncryptionKey.KeyId
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-SecondaryDvaEncryptionKeyId

  DvaSigningKeyArnOutput:
    Description: DVA signing jey ID
    Value: !GetAtt DvaSigningKey.Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DvaSigningKeyArn

  SecondaryDvaSigningKeyArnOutput:
    Description: DVA signing jey ID
    Value: !GetAtt SecondaryDvaSigningKey.Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-SecondaryDvaSigningKeyArn

  DvaEncryptionKeyArnOutput:
    Description: DVA encryption key ID
    Value: !GetAtt DvaEncryptionKey.Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DvaEncryptionKeyArn

  SecondaryDvaEncryptionKeyArnOutput:
    Description: DVA encryption key ID
    Value: !GetAtt SecondaryDvaEncryptionKey.Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-SecondaryDvaEncryptionKeyArn
