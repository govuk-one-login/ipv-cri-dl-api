import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
	id "java-library"
	id "idea"
	id "jacoco"
	id 'java-test-fixtures'
}

dependencies {
	api "org.aspectj:aspectjrt:${dependencyVersions.aspectjrt_version}",
			platform("software.amazon.awssdk:bom:${dependencyVersions.aws_sdk_version}"),
			platform("com.fasterxml.jackson:jackson-bom:${dependencyVersions.jackson_version}"),
			platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:${dependencyVersions.opentelemetry_bom_alpha_version}"),
			"io.opentelemetry.instrumentation:opentelemetry-aws-sdk-2.2",
			"uk.gov.account:cri-common-lib:${dependencyVersions.cri_common_lib_version}",
			"com.nimbusds:oauth2-oidc-sdk:${dependencyVersions.nimbusds_oauth_version}",
			"software.amazon.awssdk:lambda",
			"software.amazon.awssdk:dynamodb",
			"software.amazon.awssdk:dynamodb-enhanced",
			"software.amazon.awssdk:kms",
			"software.amazon.awssdk:sqs",
			"software.amazon.awssdk:aws-crt-client",
			"com.fasterxml.jackson.core:jackson-core",
			"com.fasterxml.jackson.core:jackson-databind",
			"com.fasterxml.jackson.core:jackson-annotations",
			"com.fasterxml.jackson.datatype:jackson-datatype-jsr310",
			"com.fasterxml.jackson.datatype:jackson-datatype-jdk8",
			"org.apache.httpcomponents:httpclient:${dependencyVersions.httpcomponents_client_version}"

	aspect "software.amazon.lambda:powertools-logging:${dependencyVersions.aws_powertools_logging_version}",
			"software.amazon.lambda:powertools-metrics:${dependencyVersions.aws_powertools_metrics_version}",
			"software.amazon.lambda:powertools-parameters:${dependencyVersions.aws_powertools_parameters_version}"

	testImplementation platform("org.junit:junit-bom:${dependencyVersions.junit_version}"),
			"org.junit.platform:junit-platform-launcher:${dependencyVersions.junit_platform}",
			"org.junit.jupiter:junit-jupiter-engine",
			"org.junit.jupiter:junit-jupiter-api",
			"org.junit.jupiter:junit-jupiter-params",
			"org.mockito:mockito-junit-jupiter:${dependencyVersions.mockito_version}",
			"org.mockito:mockito-core:${dependencyVersions.mockito_version}",
			"org.hamcrest:hamcrest:${dependencyVersions.hamcrest_version}",
			"uk.org.webcompere:system-stubs-core:${dependencyVersions.webcompere_version}",
			"uk.org.webcompere:system-stubs-jupiter:${dependencyVersions.webcompere_version}"

	testFixturesImplementation "uk.gov.account:cri-common-lib:${dependencyVersions.cri_common_lib_version}",
			"org.apache.httpcomponents:httpclient:${dependencyVersions.httpcomponents_client_version}",
			"org.apache.httpcomponents:httpclient:${dependencyVersions.httpcomponents_client_version}"

	compileOnly "org.projectlombok:lombok:${dependencyVersions.lombok_version}"

	annotationProcessor "org.projectlombok:lombok:${dependencyVersions.lombok_version}"
}

tasks.named("jar") {
	manifest {
		attributes("Implementation-Title": project.name,
		"Implementation-Version": project.version)
	}
}

test {
	useJUnitPlatform ()
	finalizedBy jacocoTestReport, jacocoTestCoverageVerification
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
	}
}

tasks.withType(Test) {
	testLogging {
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED

		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces true

		afterSuite { suite, result ->
			if (!suite.parent) {
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
				def startItem = "|  ", endItem = "  |"
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println("\n" + ("-" * repeatLength) + "\n" + startItem + output + endItem + "\n" + ("-" * repeatLength))
			}
		}
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				minimum = minUnitTestLineCoverage
			}
			limit {
				counter = 'BRANCH'
				minimum = minUnitTestBranchCoverage
			}
		}
	}
}
